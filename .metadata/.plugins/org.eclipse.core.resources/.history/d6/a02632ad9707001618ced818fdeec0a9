/*
 *Ouvrage.cpp
 * \brief Fichier code source de la classe Ouvrage
 * \author Sativen Murden
 * \version 1.0
 * \date 2016-04-02
 */

#include "Ouvrage.h"
#include <sstream>
using namespace std;
namespace tp {

	// TODO Auto-generated constructor stub
/**
 * \brief Constructeur de la classe Ouvrage
 *  Les parametres de cette classe sont:
 * \param p_auteurs de l'ouvrage
 * \param p_titre de l'ouvrage
 * \param p_identifiant (Code ISBN) de l'ouvrage
 * \param p_annee de l'ouvrage
 * \param p_ville de l'ouvrage
 * \param p_editeur de l'ouvrage
 */
Ouvrage::Ouvrage(const std::string& p_auteurs, const std::string& p_titre,
		const std::string& p_identifiant, unsigned p_annee,
		const std::string& p_ville, const std::string& p_editeur) :
		Reference(p_auteurs, p_titre, p_identifiant, p_annee) {

	m_ville=p_ville;
    m_editeur=p_editeur;

    POSTCONDITION( m_ville==p_ville);
    POSTCONDITION( m_editeur==p_editeur);

	PRECONDITION(validerFormatNom(p_ville));
	PRECONDITION(validerFormatNom(p_editeur));

	INVARIANTS();
}
/**
 * brief Acceseur pour pour reqReferenceFormate
 * return le format des références
 */
std::string Ouvrage::reqReferenceFormate() const {
	std::ostringstream os;
	os << Reference::reqReferenceFormate() << "";
	os << reqVille() << " : " << reqEditeur() << ", ";
	os << Reference::reqAnnee() << ". ";
	os << Reference::reqIdentifiant() << ".";
	return os.str();
}

/**
 * brief Acceseur pour reqEditeur
 * return m_editeur  l'editeur de l'objet
 */
const std::string& Ouvrage::reqEditeur() const {
	return m_editeur;
}

/**
 * brief Acceseur pour reqVille
 * return m_ville  la ville de l'objet
 */
const std::string& Ouvrage::reqVille() const {
	return m_ville;
}

Reference* Ouvrage::clone() const {
	return new Ouvrage(*this);
}

/**
 * \brief Mutateur pour editeur, modifie l'editeur
 */

void Ouvrage::asgEditeur(const string& p_editeur) {
	PRECONDITION(validerFormatNom(p_editeur));
	m_editeur = p_editeur;
	POSTCONDITION(m_editeur == p_editeur);
	INVARIANTS();
}

/**
 * \brief Mutateur pour ville, modifie la ville
 */

void Ouvrage::asgVille(const string& p_ville) {
	PRECONDITION(validerFormatNom(p_ville));
	m_ville = p_ville;
	POSTCONDITION(m_ville == p_ville);
	INVARIANTS();
}

Ouvrage::~Ouvrage() {
	// TODO Auto-generated destructor stub
}
void Ouvrage::verifieInvariant() const
{
	INVARIANT(!(m_ville.empty()));
	INVARIANT(!(m_editeur.empty()));

}
} /* namespace tp */
